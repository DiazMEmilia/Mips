--
-- Generated by VASY
--
ENTITY datapath IS
PORT(
  clk	: IN BIT;
  reset	: IN BIT;
  readdata	: IN BIT_VECTOR(31 DOWNTO 0);
  writedata	: OUT BIT_VECTOR(31 DOWNTO 0);
  memadr	: OUT BIT_VECTOR(31 DOWNTO 0);
  iord	: IN BIT;
  irwrite	: IN BIT;
  instrop	: OUT BIT_VECTOR(5 DOWNTO 0);
  instrfunc	: OUT BIT_VECTOR(5 DOWNTO 0);
  regdst	: IN BIT;
  memtoreg	: IN BIT;
  regwrite	: IN BIT;
  alusrca	: IN BIT;
  aluzero	: OUT BIT;
  pcen	: IN BIT;
  pcsrc	: IN BIT_VECTOR(1 DOWNTO 0);
  alucontrol	: IN BIT_VECTOR(2 DOWNTO 0);
  alusrcb	: IN BIT_VECTOR(1 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT
);
END datapath;

ARCHITECTURE VST OF datapath IS

  SIGNAL rtl_map_5	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rtl_map_4	: BIT;
  SIGNAL rtl_map_3	: BIT;
  SIGNAL rtl_map_2	: BIT;
  SIGNAL rtl_map_1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rtl_map_0	: BIT;
  SIGNAL instr	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL data	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rfd1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rfd2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL rfwd	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL opa	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL opb	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL signimm	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL signimmsh	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL srca	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL srcb	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL aluresult	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL aluout	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pcnext	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pc	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL salto	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL pcjump	: BIT_VECTOR(27 DOWNTO 0);
  SIGNAL rfwa	: BIT_VECTOR(4 DOWNTO 0);

  COMPONENT datapath_model
  PORT(
  writedata	: OUT BIT_VECTOR(31 DOWNTO 0);
  instrop	: OUT BIT_VECTOR(5 DOWNTO 0);
  instrfunc	: OUT BIT_VECTOR(5 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT;
  pcjump	: IN BIT_VECTOR(27 DOWNTO 0);
  salto	: OUT BIT_VECTOR(31 DOWNTO 0);
  pc	: IN BIT_VECTOR(31 DOWNTO 0);
  opb	: IN BIT_VECTOR(31 DOWNTO 0);
  instr	: IN BIT_VECTOR(31 DOWNTO 0);
  rtl_map_0	: OUT BIT;
  rtl_map_1	: OUT BIT_VECTOR(31 DOWNTO 0);
  rtl_map_2	: OUT BIT;
  rtl_map_3	: OUT BIT;
  rtl_map_4	: OUT BIT;
  rtl_map_5	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT sl22
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT_VECTOR(25 DOWNTO 0);
  y	: OUT BIT_VECTOR(27 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT sl2
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT_VECTOR(31 DOWNTO 0);
  y	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT signext
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT_VECTOR(15 DOWNTO 0);
  y	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT regfile
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  we3	: IN BIT;
  a1	: IN BIT_VECTOR(4 DOWNTO 0);
  a2	: IN BIT_VECTOR(4 DOWNTO 0);
  a3	: IN BIT_VECTOR(4 DOWNTO 0);
  wd3	: IN BIT_VECTOR(31 DOWNTO 0);
  rd1	: OUT BIT_VECTOR(31 DOWNTO 0);
  rd2	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT reg
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  rst	: IN BIT;
  en	: IN BIT;
  d	: IN BIT_VECTOR(31 DOWNTO 0);
  q	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT mux4
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  d0	: IN BIT_VECTOR(31 DOWNTO 0);
  d1	: IN BIT_VECTOR(31 DOWNTO 0);
  d2	: IN BIT_VECTOR(31 DOWNTO 0);
  d3	: IN BIT_VECTOR(31 DOWNTO 0);
  s	: IN BIT_VECTOR(1 DOWNTO 0);
  y	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT mux2_5b
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  d0	: IN BIT_VECTOR(4 DOWNTO 0);
  d1	: IN BIT_VECTOR(4 DOWNTO 0);
  s	: IN BIT;
  y	: OUT BIT_VECTOR(4 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT mux2
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  d0	: IN BIT_VECTOR(31 DOWNTO 0);
  d1	: IN BIT_VECTOR(31 DOWNTO 0);
  s	: IN BIT;
  y	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT alu
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT_VECTOR(31 DOWNTO 0);
  b	: IN BIT_VECTOR(31 DOWNTO 0);
  ctrl	: IN BIT_VECTOR(2 DOWNTO 0);
  res	: OUT BIT_VECTOR(31 DOWNTO 0);
  zero	: OUT BIT
  );
  END COMPONENT;

BEGIN

  datapath_inst : datapath_model
  PORT MAP (
    writedata => writedata,
    instrop => instrop,
    instrfunc => instrfunc,
    vdd => vdd,
    vss => vss,
    pcjump => pcjump,
    salto => salto,
    pc => pc,
    opb => opb,
    instr => instr,
    rtl_map_0 => rtl_map_0,
    rtl_map_1 => rtl_map_1,
    rtl_map_2 => rtl_map_2,
    rtl_map_3 => rtl_map_3,
    rtl_map_4 => rtl_map_4,
    rtl_map_5 => rtl_map_5
  );
  alureg : reg
  PORT MAP (
    d(31 downto 0) => aluresult,
    q(31 downto 0) => aluout,
    en => rtl_map_0,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  alu2 : alu
  PORT MAP (
    a(31 downto 0) => srca,
    b(31 downto 0) => srcb,
    ctrl(2 downto 0) => alucontrol,
    res(31 downto 0) => aluresult,
    zero => aluzero,
    vdd => vdd,
    vss => vss
  );
  srcbmux : mux4
  PORT MAP (
    d0(31 downto 0) => opb,
    d1(31 downto 0) => rtl_map_1,
    d2(31 downto 0) => signimm,
    d3(31 downto 0) => signimmsh,
    s(1 downto 0) => alusrcb,
    y(31 downto 0) => srcb,
    vdd => vdd,
    vss => vss
  );
  srcamux : mux2
  PORT MAP (
    d0(31 downto 0) => pc,
    d1(31 downto 0) => opa,
    y(31 downto 0) => srca,
    s => alusrca,
    vdd => vdd,
    vss => vss
  );
  shift2 : sl2
  PORT MAP (
    a(31 downto 0) => signimm,
    y(31 downto 0) => signimmsh,
    vdd => vdd,
    vss => vss
  );
  signext2 : signext
  PORT MAP (
    a(15 downto 0) => instr(15 downto 0),
    y(31 downto 0) => signimm,
    vdd => vdd,
    vss => vss
  );
  rfrd2reg : reg
  PORT MAP (
    d(31 downto 0) => rfd2,
    q(31 downto 0) => opb,
    en => rtl_map_2,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  rfrd1reg : reg
  PORT MAP (
    d(31 downto 0) => rfd1,
    q(31 downto 0) => opa,
    en => rtl_map_3,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  rf : regfile
  PORT MAP (
    a1(4 downto 0) => instr(25 downto 21),
    a2(4 downto 0) => instr(20 downto 16),
    a3(4 downto 0) => rfwa,
    wd3(31 downto 0) => rfwd,
    rd1(31 downto 0) => rfd1,
    rd2(31 downto 0) => rfd2,
    we3 => regwrite,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  rfwdmux : mux2
  PORT MAP (
    d0(31 downto 0) => aluout,
    d1(31 downto 0) => data,
    y(31 downto 0) => rfwd,
    s => memtoreg,
    vdd => vdd,
    vss => vss
  );
  rfwamux : mux2_5b
  PORT MAP (
    d0(4 downto 0) => instr(20 downto 16),
    d1(4 downto 0) => instr(15 downto 11),
    y(4 downto 0) => rfwa,
    s => regdst,
    vdd => vdd,
    vss => vss
  );
  datareg : reg
  PORT MAP (
    d(31 downto 0) => readdata,
    q(31 downto 0) => data,
    en => rtl_map_4,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  instrreg : reg
  PORT MAP (
    d(31 downto 0) => readdata,
    q(31 downto 0) => instr,
    en => irwrite,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  shiftsalto : sl22
  PORT MAP (
    a(25 downto 0) => instr(25 downto 0),
    y(27 downto 0) => pcjump,
    vdd => vdd,
    vss => vss
  );
  memadrmux : mux2
  PORT MAP (
    d0(31 downto 0) => pc,
    d1(31 downto 0) => aluout,
    y(31 downto 0) => memadr,
    s => iord,
    vdd => vdd,
    vss => vss
  );
  pcmux : mux4
  PORT MAP (
    d0(31 downto 0) => aluresult,
    d1(31 downto 0) => aluout,
    d2(31 downto 0) => salto,
    d3(31 downto 0) => rtl_map_5,
    s(1 downto 0) => pcsrc,
    y(31 downto 0) => pcnext,
    vdd => vdd,
    vss => vss
  );
  pcreg : reg
  PORT MAP (
    d(31 downto 0) => pcnext,
    q(31 downto 0) => pc,
    en => pcen,
    rst => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
END VST;
