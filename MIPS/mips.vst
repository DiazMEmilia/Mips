--
-- Generated by VASY
--
ENTITY mips IS
PORT(
  clock	: IN BIT;
  clock2	: IN BIT;
  reset	: IN BIT;
  xrd	: OUT BIT_VECTOR(31 DOWNTO 0);
  xwd	: OUT BIT_VECTOR(31 DOWNTO 0);
  xadr	: OUT BIT_VECTOR(31 DOWNTO 0);
  xmemwrite	: OUT BIT;
  xiord	: OUT BIT;
  irwrite	: OUT BIT;
  xinstrop	: OUT BIT_VECTOR(5 DOWNTO 0);
  xinstrfunc	: OUT BIT_VECTOR(5 DOWNTO 0);
  xregdst	: OUT BIT;
  xmemtoreg	: OUT BIT;
  xregwrite	: OUT BIT;
  xalusrca	: OUT BIT;
  xaluzero	: OUT BIT;
  xpcsrc	: OUT BIT_VECTOR(1 DOWNTO 0);
  xpcen	: OUT BIT;
  xalucontrol	: OUT BIT_VECTOR(2 DOWNTO 0);
  xalusrcb	: OUT BIT_VECTOR(1 DOWNTO 0);
  estado	: OUT BIT_VECTOR(3 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT
);
END mips;

ARCHITECTURE VST OF mips IS

  SIGNAL spcen	: BIT;
  SIGNAL siord	: BIT;
  SIGNAL sirwrite	: BIT;
  SIGNAL sregdst	: BIT;
  SIGNAL smemtoreg	: BIT;
  SIGNAL sregwrite	: BIT;
  SIGNAL salusrca	: BIT;
  SIGNAL spcwrite	: BIT;
  SIGNAL sbranch	: BIT;
  SIGNAL saluzero	: BIT;
  SIGNAL temp1	: BIT;
  SIGNAL wememo	: BIT;
  SIGNAL salusrcb	: BIT_VECTOR(1 DOWNTO 0);
  SIGNAL spcsrcmux	: BIT_VECTOR(1 DOWNTO 0);
  SIGNAL rdmemo	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL wdmemo	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL adrmemo	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL sinstrfunc	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL sinstrop	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL salucontrol	: BIT_VECTOR(2 DOWNTO 0);

  COMPONENT mips_model
  PORT(
  xrd	: OUT BIT_VECTOR(31 DOWNTO 0);
  xwd	: OUT BIT_VECTOR(31 DOWNTO 0);
  xadr	: OUT BIT_VECTOR(31 DOWNTO 0);
  xmemwrite	: OUT BIT;
  xiord	: OUT BIT;
  irwrite	: OUT BIT;
  xinstrop	: OUT BIT_VECTOR(5 DOWNTO 0);
  xinstrfunc	: OUT BIT_VECTOR(5 DOWNTO 0);
  xregdst	: OUT BIT;
  xmemtoreg	: OUT BIT;
  xregwrite	: OUT BIT;
  xalusrca	: OUT BIT;
  xaluzero	: OUT BIT;
  xpcsrc	: OUT BIT_VECTOR(1 DOWNTO 0);
  xpcen	: OUT BIT;
  xalucontrol	: OUT BIT_VECTOR(2 DOWNTO 0);
  xalusrcb	: OUT BIT_VECTOR(1 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT;
  salucontrol	: IN BIT_VECTOR(2 DOWNTO 0);
  sinstrop	: IN BIT_VECTOR(5 DOWNTO 0);
  sinstrfunc	: IN BIT_VECTOR(5 DOWNTO 0);
  adrmemo	: IN BIT_VECTOR(31 DOWNTO 0);
  wdmemo	: IN BIT_VECTOR(31 DOWNTO 0);
  rdmemo	: IN BIT_VECTOR(31 DOWNTO 0);
  spcsrcmux	: IN BIT_VECTOR(1 DOWNTO 0);
  salusrcb	: IN BIT_VECTOR(1 DOWNTO 0);
  wememo	: IN BIT;
  saluzero	: IN BIT;
  salusrca	: IN BIT;
  sregwrite	: IN BIT;
  smemtoreg	: IN BIT;
  sregdst	: IN BIT;
  sirwrite	: IN BIT;
  siord	: IN BIT;
  spcen	: IN BIT
  );
  END COMPONENT;

  COMPONENT or2
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  i0	: IN BIT;
  i1	: IN BIT;
  q	: OUT BIT
  );
  END COMPONENT;

  COMPONENT and2
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  i0	: IN BIT;
  i1	: IN BIT;
  q	: OUT BIT
  );
  END COMPONENT;

  COMPONENT memoria
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  we	: IN BIT;
  adr	: IN BIT_VECTOR(31 DOWNTO 0);
  wd	: IN BIT_VECTOR(31 DOWNTO 0);
  rd	: OUT BIT_VECTOR(31 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT control
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  reset	: IN BIT;
  opcode	: IN BIT_VECTOR(5 DOWNTO 0);
  func	: IN BIT_VECTOR(5 DOWNTO 0);
  alucontrol	: OUT BIT_VECTOR(2 DOWNTO 0);
  memtoreg	: OUT BIT;
  regdst	: OUT BIT;
  iord	: OUT BIT;
  pcsrc	: OUT BIT_VECTOR(1 DOWNTO 0);
  alusrcb	: OUT BIT_VECTOR(1 DOWNTO 0);
  alusrca	: OUT BIT;
  irwrite	: OUT BIT;
  memwrite	: OUT BIT;
  pcwrite	: OUT BIT;
  branch	: OUT BIT;
  regwrite	: OUT BIT;
  state	: OUT BIT_VECTOR(3 DOWNTO 0)
  );
  END COMPONENT;

  COMPONENT datapath
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  reset	: IN BIT;
  readdata	: IN BIT_VECTOR(31 DOWNTO 0);
  writedata	: OUT BIT_VECTOR(31 DOWNTO 0);
  memadr	: OUT BIT_VECTOR(31 DOWNTO 0);
  iord	: IN BIT;
  irwrite	: IN BIT;
  instrop	: OUT BIT_VECTOR(5 DOWNTO 0);
  instrfunc	: OUT BIT_VECTOR(5 DOWNTO 0);
  regdst	: IN BIT;
  memtoreg	: IN BIT;
  regwrite	: IN BIT;
  alusrca	: IN BIT;
  aluzero	: OUT BIT;
  pcsrc	: IN BIT_VECTOR(1 DOWNTO 0);
  pcen	: IN BIT;
  alucontrol	: IN BIT_VECTOR(2 DOWNTO 0);
  alusrcb	: IN BIT_VECTOR(1 DOWNTO 0)
  );
  END COMPONENT;

BEGIN

  mips_inst : mips_model
  PORT MAP (
    xrd => xrd,
    xwd => xwd,
    xadr => xadr,
    xmemwrite => xmemwrite,
    xiord => xiord,
    irwrite => irwrite,
    xinstrop => xinstrop,
    xinstrfunc => xinstrfunc,
    xregdst => xregdst,
    xmemtoreg => xmemtoreg,
    xregwrite => xregwrite,
    xalusrca => xalusrca,
    xaluzero => xaluzero,
    xpcsrc => xpcsrc,
    xpcen => xpcen,
    xalucontrol => xalucontrol,
    xalusrcb => xalusrcb,
    vdd => vdd,
    vss => vss,
    salucontrol => salucontrol,
    sinstrop => sinstrop,
    sinstrfunc => sinstrfunc,
    adrmemo => adrmemo,
    wdmemo => wdmemo,
    rdmemo => rdmemo,
    spcsrcmux => spcsrcmux,
    salusrcb => salusrcb,
    wememo => wememo,
    saluzero => saluzero,
    salusrca => salusrca,
    sregwrite => sregwrite,
    smemtoreg => smemtoreg,
    sregdst => sregdst,
    sirwrite => sirwrite,
    siord => siord,
    spcen => spcen
  );
  memo : memoria
  PORT MAP (
    adr(31 downto 0) => adrmemo,
    wd(31 downto 0) => wdmemo,
    rd(31 downto 0) => rdmemo,
    we => wememo,
    clk => clock,
    vdd => vdd,
    vss => vss
  );
  control_ppal : control
  PORT MAP (
    opcode(5 downto 0) => sinstrop,
    func(5 downto 0) => sinstrfunc,
    alucontrol(2 downto 0) => salucontrol,
    pcsrc(1 downto 0) => spcsrcmux,
    alusrcb(1 downto 0) => salusrcb,
    state(3 downto 0) => estado,
    regwrite => sregwrite,
    branch => sbranch,
    pcwrite => spcwrite,
    memwrite => wememo,
    irwrite => sirwrite,
    alusrca => salusrca,
    iord => siord,
    regdst => sregdst,
    memtoreg => smemtoreg,
    reset => reset,
    clk => clock2,
    vdd => vdd,
    vss => vss
  );
  dp_completo : datapath
  PORT MAP (
    readdata(31 downto 0) => rdmemo,
    writedata(31 downto 0) => wdmemo,
    memadr(31 downto 0) => adrmemo,
    instrop(5 downto 0) => sinstrop,
    instrfunc(5 downto 0) => sinstrfunc,
    pcsrc(1 downto 0) => spcsrcmux,
    alucontrol(2 downto 0) => salucontrol,
    alusrcb(1 downto 0) => salusrcb,
    pcen => spcen,
    aluzero => saluzero,
    alusrca => salusrca,
    regwrite => sregwrite,
    memtoreg => smemtoreg,
    regdst => sregdst,
    irwrite => sirwrite,
    iord => siord,
    reset => reset,
    clk => clock,
    vdd => vdd,
    vss => vss
  );
  compand : and2
  PORT MAP (
    q => temp1,
    i1 => saluzero,
    i0 => sbranch,
    vdd => vdd,
    vss => vss
  );
  compor : or2
  PORT MAP (
    q => spcen,
    i1 => temp1,
    i0 => spcwrite,
    vdd => vdd,
    vss => vss
  );
END VST;
